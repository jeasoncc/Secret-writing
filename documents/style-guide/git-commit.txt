                    ________________________________

                     GIT COMMIT MESSAGE STYLE GUIDE

                                 Jeason
                    ________________________________


Table of Contents
_________________

1. Udacity Git Commit Message Style Guide
.. 1. Introduction
.. 2. Commit messages
..... 1. Message structure
..... 2. The Type
..... 3. The Subject
..... 4. The Body
..... 5. The Footer
..... 6. Example commit Meaasge


#URL: <https://udacity.github.io/git-styleguide/>


1 Udacity Git Commit Message Style Guide
========================================

1.1 Introduction
~~~~~~~~~~~~~~~~

  This style guide acts as officcl guide to follow in your project.
  Udacity evaluat will use this guide to grade your project. There are
  many opinion on the "ideal" styple in the world development.
  Therefore, in order to reduce the confusion on what style student
  follow during the course of their project, we urge all student to
  refer to this style guide for their project.


1.2 Commit messages
~~~~~~~~~~~~~~~~~~~

1.2.1 Message structure
-----------------------

  A commit messages consists of three distinct parts separated by a
  blank line: the tile

  ,----
  | 
  | type: subject
  | 
  | body
  | 
  | footer
  | 
  `----

  The tile consists of the type of the message and subject


1.2.2 The Type
--------------

  The type is contained within the title and can be one of these types:

  + feat: A new feature
  + fix: A but fixed
  + docs: Change to documention
  + refactor: Refactoring production code
  + test: Add tests, refactoring test. no production code change
  + chore: Updating build tasks, package manager configs, no production
    code change


1.2.3 The Subject
-----------------

  Subject should be no greater than 50 character, should begin with a
  capital letter and do not end with period.

  Use an imperative tone to describe what a commit does, rather than
  what it did. For example, use *change*; not changed


1.2.4 The Body
--------------

  Not all commits are complex enough to warrant a body, therefore it is
  optional and only used when a commit requires a bit explanation and
  context. Use the body to explain the *what* and *why* of a commit,not
  the how.

  when writing a body, the blank line between the title and the body is
  required and you should limit the length of each line to no more than
  72 characters.


1.2.5 The Footer
----------------

  the footer is optional and is used to reference issue tracker IDs.


1.2.6 Example commit Meaasge
----------------------------

  ,----
  | feat: Summarize changes in around 50 characters or less
  | 
  | More detailed explanatory text, if nessary. Wrap it to about 72
  | charcters or so. In some contexts, the first line is treated as the
  | subjct of the comit and the rest of the text as the body. The blank
  | line separating the summary from the body is critial
  | (unless you omit the body entirely)
  | various tools like `log` `shortlog` and `rebase` cna get confused if
  | you run the two together.
  | 
  | Explain the probem that this commit is solving. Focus on why you
  | are making this change as opposed to how
  | (the code explain that)
  | Are there side effects or other unintutive consequences of this
  | change? Here's tha place to explan them.
  | 
  | Further paragraphs come after blank lines.
  | 
  | - Bullet plints are okay, tools
  | 
  | - Typically a hyphen or asterisk is used for the bullet, preceded
  | by a single space, with blank lines in between, but conventions
  | vary here
  | 
  | If you use an issue traker, put reference the them at the bottom,
  | like this:
  | 
  | Resolves: #123
  | See also: #456, #789
  | 
  `----
